// <auto-generated />
using System;
using Fms.Persistance.Infrastructure.Context;

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fms.Persistance.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230427053148_skills and checklists")]
    partial class skillsandchecklists
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("date")
                        .HasColumnName("completedOn");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Description");

                    b.Property<bool?>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsComplete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Notes");

                    b.Property<Guid?>("RelatedDocuments")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RelatedDocuments");

                    b.Property<Guid>("Skillsrequired")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Skillsrequired");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("date")
                        .HasColumnName("StartedOn");

                    b.Property<Guid?>("TaskLog")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TaskLog");

                    b.HasKey("Id");

                    b.ToTable("Activity", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.ActivityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("Attachments")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Attachments");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("date")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Status")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.ToTable("ActivityLog", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.CheckLists", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("ActivityList")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActivityList");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("date")
                        .HasColumnName("CompletedOn");

                    b.Property<bool?>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsComplete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Notes");

                    b.Property<Guid?>("RelatedDocuments")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RelatedDocuments");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TicketId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketId1");

                    b.ToTable("CheckLists", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.ContactDomainRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CustomerAccount")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("CustomerAccount");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("Domain");

                    b.Property<Guid>("RoleGroup")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleGroup");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroup");

                    b.ToTable("ContactDomainRoles", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Documents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ActionType")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("DueOn")
                        .HasColumnType("date")
                        .HasColumnName("DueOn");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("file");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("FileType")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("IsComplete")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("RequiresAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("RequiresAction")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("date")
                        .HasColumnName("SentOn");

                    b.Property<bool?>("TimeSensitive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("TimeSensitive")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("date")
                        .HasColumnName("UpdatedOn");

                    b.HasKey("Id");

                    b.ToTable("Documents", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.EmploymentDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("ActiveTicket")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ActiveTicket");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("date")
                        .HasColumnName("CreatedOn");

                    b.Property<Guid?>("Documentation")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Documentation");

                    b.Property<string>("EmploymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("EmploymentStatus")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("JobTitle");

                    b.Property<Guid?>("ReportsTo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Skills")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Skills");

                    b.Property<Guid?>("TicketAssignments")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("TicketAssignments");

                    b.Property<double?>("TravelRangeLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("TravelRangeLimit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("ActiveTicket");

                    b.ToTable("EmploymentDetails", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.GeneralDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Address");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("EmailAddress");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("EmergencyContactName");

                    b.Property<string>("EmergencyContactNumber")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("EmergencyContactNumber");

                    b.Property<string>("EmergencyContactRelation")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("EmergencyContactRelation");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("GeneralDetails", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("PermissionMatrix")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PermissionMatrix");

                    b.Property<Guid?>("RoleGroup")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RoleGroup");

                    b.HasKey("Id");

                    b.HasIndex("RoleGroup");

                    b.ToTable("Role", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("RoleGroup", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.RoleObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("Group")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Group");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ObjectName");

                    b.Property<Guid>("Role")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.HasIndex("Group");

                    b.ToTable("RoleObject", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Skills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TicketId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketId1");

                    b.ToTable("Skills", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("ApprovedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ApprovedBy");

                    b.Property<DateTime?>("Approvedon")
                        .HasColumnType("date")
                        .HasColumnName("Approvedon");

                    b.Property<Guid?>("CanBeApprovedByRoles")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CanBeApprovedByRoles");

                    b.Property<string>("Client")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Client");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedBy");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("date")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Notes");

                    b.Property<string>("Referencenumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Referencenumber");

                    b.Property<Guid?>("RequestedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestedBy");

                    b.Property<DateTime?>("Requestedon")
                        .HasColumnType("date")
                        .HasColumnName("Requestedon");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Status")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CanBeApprovedByRoles");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("RequestedBy");

                    b.ToTable("Ticket", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("EmploymentDetails")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmploymentDetails");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Password");

                    b.Property<Guid>("PersonalDetails")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PersonalDetails");

                    b.Property<Guid>("Role")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Role");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("UserType")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentDetails")
                        .IsUnique();

                    b.HasIndex("PersonalDetails")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.ToTable("User", "dbo");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.CheckLists", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.Ticket", null)
                        .WithMany("CheckLists")
                        .HasForeignKey("TicketId");

                    b.HasOne("Fms.Domain.DbEntity.Entities.Ticket", null)
                        .WithMany("CheckListsCollection")
                        .HasForeignKey("TicketId1");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.ContactDomainRoles", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.RoleGroup", "RoleGroup1")
                        .WithMany("ContactDomainRoles")
                        .HasForeignKey("RoleGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__ContactDo__RoleG__5FB337D6");

                    b.Navigation("RoleGroup1");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.EmploymentDetails", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.Ticket", "ActiveTicket1")
                        .WithMany("ActiveEmploymentDetails")
                        .HasForeignKey("ActiveTicket")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ActiveTicket1");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Role", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.RoleGroup", "RoleGroup1")
                        .WithMany("Roles")
                        .HasForeignKey("RoleGroup")
                        .HasConstraintName("FK__Role__RoleGroup__60A75C0F");

                    b.Navigation("RoleGroup1");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.RoleObject", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.RoleGroup", "GroupRoleGroup")
                        .WithMany("GroupRoleObjects")
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__RoleObjec__Group__628FA481");

                    b.Navigation("GroupRoleGroup");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Skills", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.Ticket", null)
                        .WithMany("SkillsCollection")
                        .HasForeignKey("TicketId");

                    b.HasOne("Fms.Domain.DbEntity.Entities.Ticket", null)
                        .WithMany("Skillsrequired")
                        .HasForeignKey("TicketId1");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Ticket", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.User", "ApprovedByUser")
                        .WithMany("ApprovedByTickets")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK__Ticket__Approved__5441852A");

                    b.HasOne("Fms.Domain.DbEntity.Entities.Role", "CanBeApprovedBysRole")
                        .WithMany("CanBeApprovedBysTickets")
                        .HasForeignKey("CanBeApprovedByRoles")
                        .HasConstraintName("FK__Ticket__CanBeApp__534D60F1");

                    b.HasOne("Fms.Domain.DbEntity.Entities.User", "CreatedByUser")
                        .WithMany("CreatedByTickets")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Ticket__CreatedB__5535A963");

                    b.HasOne("Fms.Domain.DbEntity.Entities.User", "RequestedByUser")
                        .WithMany("RequestedByTickets")
                        .HasForeignKey("RequestedBy")
                        .HasConstraintName("FK__Ticket__Requeste__5629CD9C");

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CanBeApprovedBysRole");

                    b.Navigation("CreatedByUser");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.User", b =>
                {
                    b.HasOne("Fms.Domain.DbEntity.Entities.EmploymentDetails", "EmploymentDetails1")
                        .WithOne("User")
                        .HasForeignKey("Fms.Domain.DbEntity.Entities.User", "EmploymentDetails")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fms.Domain.DbEntity.Entities.GeneralDetails", "GeneralDetails")
                        .WithOne("ReferencedUser")
                        .HasForeignKey("Fms.Domain.DbEntity.Entities.User", "PersonalDetails")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__User__PersonalDe__5CD6CB2B");

                    b.HasOne("Fms.Domain.DbEntity.Entities.Role", "Role1")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK__User__Role__5EBF139D");

                    b.Navigation("EmploymentDetails1");

                    b.Navigation("GeneralDetails");

                    b.Navigation("Role1");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.EmploymentDetails", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.GeneralDetails", b =>
                {
                    b.Navigation("ReferencedUser")
                        .IsRequired();
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Role", b =>
                {
                    b.Navigation("CanBeApprovedBysTickets");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.RoleGroup", b =>
                {
                    b.Navigation("ContactDomainRoles");

                    b.Navigation("GroupRoleObjects");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.Ticket", b =>
                {
                    b.Navigation("ActiveEmploymentDetails");

                    b.Navigation("CheckLists");

                    b.Navigation("CheckListsCollection");

                    b.Navigation("SkillsCollection");

                    b.Navigation("Skillsrequired");
                });

            modelBuilder.Entity("Fms.Domain.DbEntity.Entities.User", b =>
                {
                    b.Navigation("ApprovedByTickets");

                    b.Navigation("CreatedByTickets");

                    b.Navigation("RequestedByTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
